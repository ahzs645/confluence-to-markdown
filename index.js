const { JSDOM } = require("jsdom");
const prettier = require("prettier");

const main = async () => {
  const { window } = await JSDOM.fromFile('Binary-Authorization_307954925.html')

  var main = window.document.querySelector('#main')

  var findLang = /brush: (\w+);/

  var startsWithNewline = str => /^\s?\n/m.test(str);
  var endsWithNewline = str => /\n\s?$/m.test(str);
  var isOnlyWhitespace = str => /^\s+$/m.test(str);
  var denylist = [
    'created by',
    'document generated by',
    'atlassian',
    'modified by'
  ]
  var startsWithExcludedString = str => 
    denylist.some(deny => (
      str.textContent.trim().toLowerCase().startsWith(deny)
    ))


  var toMarkdownChildren = nodes => [...nodes.childNodes].flatMap(toMarkdown).join('');

  var toMarkdown = node => {
    switch (node.nodeName) {
      case '#text':
        //if (isOnlyWhitespace(str)) return [];
        const str = node.textContent;
        return [
          startsWithNewline(str) ? '\n': '',
          str.trim(),
          endsWithNewline(str) ? '\n' : ''
        ];
      case 'span':
        return [' ', toMarkdownChildren(node), ' '];
      case 'BR':
        return ['\n'];
      case 'P':
        return ['\n', toMarkdownChildren(node), '\n']
      case 'B':
      case 'STRONG':
        return [' **', toMarkdownChildren(node), '** ']
      case 'I':
        return [' *', toMarkdownChildren(node), '* ']
      // Todo OL should make 1. instead of -
      case 'UL':
      case 'OL':
        return ['\n', toMarkdownChildren(node), '\n'];
      case 'LI':
        return ['- ', toMarkdownChildren(node).trim()];
      case 'A':
        return [' [', toMarkdownChildren(node), '](', node.href, ') '];
      case 'CODE':
        return [' `', toMarkdownChildren(node), '` '];
      case 'PRE':
        const [_, lang = '' ] = findLang.exec(node.dataset.syntaxhighlighterParams) || []
        return [
          '\n```', 
          lang, 
          '\n', 
          toMarkdownChildren(node),
          '\n```\n'
        ];
      case 'H1':
        return ['# ', toMarkdownChildren(node).trim(), '\n'];
      case 'H2':
        return ['## ', toMarkdownChildren(node).trim(), '\n'];
      case 'H3':
        return ['### ', toMarkdownChildren(node).trim()], '\n';
      case 'H4':
        return ['#### ', toMarkdownChildren(node).trim()], '\n';
      case 'H5':
        return ['##### ', toMarkdownChildren(node).trim(), '\n'];
      case 'TABLE':
        const rows = [...node.childNodes[1].childNodes];
        if (rows.length === 0) return [];
        return [
          '\n', // TODO remove
          '\n', // TODO remove
          ...toMarkdown(rows[0]),
          '|', 
          ...[...rows[0].childNodes].fill('--').join('|'),
          '|', 
          '\n',
          ...rows.slice(1).flatMap(row => toMarkdown(row)),
          '\n', // TODO remove
          '\n', // TODO remove
        ];
      case 'TR':
        const cells = [...node.childNodes];
        return ['| ', cells.map(cell => toMarkdown(cell)).join(' | '), ' |', '\n'];
      case 'TH':
      case 'TD':
        return toMarkdownChildren(node).trim();
      default:
        return toMarkdownChildren(node);
        
    }
  }

  let result = toMarkdownChildren(main);
  result = prettier.format(result, { parser: 'markdown' });

  console.log(result)
};

console.log('----- START -----')
main();